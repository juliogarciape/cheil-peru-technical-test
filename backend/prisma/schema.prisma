// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name         String   @db.VarChar(50)
  email        String   @unique @db.VarChar(50)
  password     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp()
  products    Product[] @relation("UserProducts")
  categories  Category[]  @relation("UserCategories")
  @@map("users")
}

model Category {
  categoryId  Int    @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description   String  @db.VarChar(200)
  userId      String     @db.Uuid
  user        User       @relation("UserCategories", fields: [userId], references: [userId], onDelete: Cascade)
  products    Product[]  @relation("CategoryProducts") 
  @@map("categories")
}

model Product {
  productId String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name String @unique @db.VarChar(100)
  description String @db.VarChar(1000)
  price Decimal @db.Decimal(10, 2)
  stock Int @db.Integer @default(0)
  createdAt DateTime @default(now()) @db.Timestamp()
  userId      String @db.Uuid       
  user        User       @relation("UserProducts", fields: [userId], references: [userId], onDelete: Cascade)
  categoryId  Int      @db.Integer
  category    Category   @relation("CategoryProducts", fields: [categoryId], references: [categoryId], onDelete: Cascade)
  @@map("products")
}
